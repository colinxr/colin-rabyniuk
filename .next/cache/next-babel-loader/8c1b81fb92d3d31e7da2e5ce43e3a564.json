{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport Prismic from 'prismic-javascript';\nimport Post from './Post';\n\nvar Food = function Food(props) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      posts = _useState2[0],\n      setPosts = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      page = _useState4[0],\n      setPage = _useState4[1];\n\n  var apiEndpoint = process.env.REACT_APP_API;\n  useEffect(function () {\n    fetchPosts();\n  }, []);\n\n  var fetchPosts = function fetchPosts() {\n    Prismic.getApi(apiEndpoint).then(function (api) {\n      return api.query(Prismic.Predicates.at('document.type', 'recipe'), {\n        pageSize: 10,\n        page: page\n      });\n    }).then(function (resp) {\n      setPosts(resp.results);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"block\"\n  }, React.createElement(\"div\", {\n    className: \"wrapper\"\n  }, React.createElement(\"h3\", null, \"Yumm\"), posts !== undefined && posts.map(function (post, i) {\n    return React.createElement(Post, {\n      key: i,\n      post: post\n    });\n  })));\n};\n\nexport default Food;","map":{"version":3,"sources":["/Users/colin/Sites/colin-rabyniuk/components/Food.js"],"names":["React","useState","useEffect","Prismic","Post","Food","props","posts","setPosts","page","setPage","apiEndpoint","process","env","REACT_APP_API","fetchPosts","getApi","then","api","query","Predicates","at","pageSize","resp","results","undefined","map","post","i"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA,kBACIL,QAAQ,EADZ;AAAA;AAAA,MACfM,KADe;AAAA,MACRC,QADQ;;AAAA,mBAEEP,QAAQ,CAAC,CAAD,CAFV;AAAA;AAAA,MAEfQ,IAFe;AAAA,MAETC,OAFS;;AAItB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAhC;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AAAEa,IAAAA,UAAU;AAAI,GAAvB,EAAyB,EAAzB,CAAT;;AAEA,MAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBZ,IAAAA,OAAO,CAACa,MAAR,CAAeL,WAAf,EACGM,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,KAAJ,CACXhB,OAAO,CAACiB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,QAAvC,CADW,EAEX;AAAEC,QAAAA,QAAQ,EAAE,EAAZ;AAAgBb,QAAAA,IAAI,EAAEA;AAAtB,OAFW,CAAJ;AAAA,KADX,EAKGQ,IALH,CAKQ,UAAAM,IAAI,EAAI;AAAEf,MAAAA,QAAQ,CAACe,IAAI,CAACC,OAAN,CAAR;AAAwB,KAL1C;AAMD,GAPD;;AASA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,uCADF,EAGIjB,KAAK,KAAKkB,SAAV,IACAlB,KAAK,CAACmB,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP;AAAA,WAAa,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,IAAI,EAAED;AAApB,MAAb;AAAA,GAAV,CAJJ,CADF,CADF;AAWD,CA5BD;;AA8BA,eAAetB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Prismic from 'prismic-javascript';\nimport Post from './Post';\n\nconst Food = (props) => {\n  const [posts, setPosts] = useState();\n  const [page, setPage] = useState(1);\n\n  const apiEndpoint = process.env.REACT_APP_API\n\n  useEffect(() => { fetchPosts() }, [])\n\n  const fetchPosts = () => {\n    Prismic.getApi(apiEndpoint)\n      .then(api => api.query(\n        Prismic.Predicates.at('document.type', 'recipe'),\n        { pageSize: 10, page: page }\n      ))\n      .then(resp => { setPosts(resp.results) });\n  }\n\n  return (\n    <div className=\"block\">\n      <div className=\"wrapper\">\n        <h3>Yumm</h3>\n        {\n          posts !== undefined &&\n          posts.map((post, i) => <Post key={i} post={post}></Post>)\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Food;"]},"metadata":{},"sourceType":"module"}